<configuration xmlns="MyWindsorSchema">
    <facilities>
        <!--
        <facility id="logging"
            type="Castle.Facilities.Logging.LoggingFacility, Castle.Facilities.Logging"
            loggingApi="log4net"
            configFile="log4net.config" />-->
    </facilities>
    <properties>
        <Smtp.Host>127.0.0.1</Smtp.Host>
        <Smtp.Port>25</Smtp.Port>
        <Smtp.From>webmaster@Groop.org</Smtp.From>
        <Smtp.To>webmaster@Groop.org</Smtp.To>
    </properties>
    <components>

        <component id="ICryptographer"
				   service="Groop.Core.Security.Cryptography.ICryptographer, Groop.Core"
				   type="Groop.Website.Impl.Security.Cryptography.Cryptographer, Groop.Website" />

        <component id="IHttpContextProvider"
				   service="Groop.Core.IHttpContextProvider, Groop.Core"
				   type="Groop.Website.Impl.HttpContextProvider, Groop.Website" />

        <component id="ISessionBuilder"
				       service="Groop.DataAccess.ISessionBuilder, Groop.DataAccess"
				       type="Groop.DataAccess.HybridSessionBuilder, Groop.DataAccess"
				       lifestyle="singleton" />

        <component id="IFormsAuthenticationGateway"
				   service="Groop.Core.Security.IFormsAuthenticationGateway, Groop.Core"
				   type="Groop.Website.Impl.FormsAuthenticationGateway, Groop.Website" />

        <!-- Service Layer -->
        <component id="IUserSession"
				 service="Groop.Core.IUserSession, Groop.Core"
				 type="Groop.Website.Impl.Security.UserSession, Groop.Website"
				 lifestyle="transient" />

        <component id="IAuthenticator"
				   service="Groop.Core.Security.IAuthenticator, Groop.Core"
				   type="Groop.Website.Impl.Security.Authenticator, Groop.Website"
				   lifestyle="transient" />

        <component id="IAuthenticationService"
				   service="Groop.Core.Services.IAuthenticationService, Groop.Core"
				   type="Groop.Core.Services.AuthenticationService, Groop.Core" />

        <!-- General -->
        
        <component id="IValidator"
                   service="Groop.Core.Validation.IValidator, Groop.Core"
                   type="Groop.Core.Validation.PresentationValidator, Groop.Core" />

        <component id="IValidatorRunner"
                   service="Castle.Components.Validator.IValidatorRunner, Castle.Components.Validator"
                   type="Castle.Components.Validator.ValidatorRunner, Castle.Components.Validator" />

        <component id="IValidatorRegistry"
                   service="Castle.Components.Validator.IValidatorRegistry, Castle.Components.Validator"
                   type="Castle.Components.Validator.CachedValidationRegistry, Castle.Components.Validator" />
        
        <!-- Services -->

        <component id="IEmailService"
                       service="Groop.Core.Services.IEmailService,  Groop.Core"
                       type=" Groop.Website.Services.Email.FakeEmailService, Groop.Website">
            <parameters>
                <host>#{Smtp.Host}</host>
                <port>#{Smtp.Port}</port>
                <defaultFrom>#{Smtp.From}</defaultFrom>
                <defaultTo>#{Smtp.To}</defaultTo>
            </parameters>
        </component>

        <component id="IMeetingService"
                   service="Groop.Core.Services.IMeetingService,  Groop.Core"
                   type=" Groop.Core.Services.Impl.MeetingService, Groop.Core"
                   lifestyle="singleton">
        </component>

        <component id="IMemberService"
                   service="Groop.Core.Services.IMemberService,  Groop.Core"
                   type=" Groop.Core.Services.Impl.MemberService, Groop.Core"
                   lifestyle="singleton">
        </component>

        <!-- Data Repositories -->

        <component id="IMemberRepository"
                   service="Groop.Core.Data.IMemberRepository, Groop.Core"
                   type="Groop.DataAccess.MemberRepository, Groop.DataAccess">
        </component>

        <component id="IMeetingRepository"
                   service="Groop.Core.Data.IMeetingRepository, Groop.Core"
                   type="Groop.DataAccess.MeetingRepository, Groop.DataAccess">
        </component>

        <component id="IFacilityRepository"
                   service="Groop.Core.Data.IFacilityRepository, Groop.Core"
                   type="Groop.DataAccess.FacilityRepository, Groop.DataAccess">
        </component>

        <component id="ISessionFactory"
                   service="Groop.DataAccess.ISessionFactory, Groop.DataAccess"
                   type="Groop.DataAccess.SessionFactory, Groop.DataAccess"
                   lifestyle="singleton">
        </component>

        <component id="IActiveSessionManager"
                   service="Groop.DataAccess.IActiveSessionManager, Groop.DataAccess"
                   type="Groop.DataAccess.ActiveSessionManager, Groop.DataAccess"
                   lifestyle="singleton">
        </component>

        <component id="IUnitOfWorkFactory"
                   service="Groop.Core.Data.IUnitOfWorkFactory, Groop.Core"
                   type="Groop.DataAccess.UnitOfWorkFactory, Groop.DataAccess"
                   lifestyle="singleton">
        </component>
        
        <!--
        <component id="IUnitOfWork"
                   service="Groop.Core.Data.IUnitOfWork, Groop.Core"
                   type="Groop.DataAccess.UnitOfWork, Groop.DataAccess"
                   lifestyle="transient">
        </component>
        -->
        <!-- End Data Repositories -->
    </components>
</configuration>
