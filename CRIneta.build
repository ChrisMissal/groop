<?xml version="1.0" ?>
<project name="CRIneta" default="build" xmlns="http://nant.sf.net/release/0.85/nant.xsd"> 
    <property name="company.name"               value="CRIneta"/>
    <property name="base.dir" 	                value="." />
    <property name="solution.name"              value="CRIneta.sln" />
    <property name="solution.dir" 	            value="src" />
    <property name="solution.file"              value="${solution.dir}/${solution.name}"/>
    <property name="solution.configuration"     value="AutomatedDebug" />
    
    <!-- Build Settings -->
    <property name="build.root.dir"             value="build" />
    <property name="build.output.dir"           value="${build.root.dir}\${solution.configuration}" />
    
    <!-- Version Settings -->
    <property name="version.major"              value="1"/>
    <property name="version.minor"              value="0"/>
    <property name="version.build"              value="${string::pad-left(datetime::get-day-of-year(datetime::now()),3,'0')}${string::substring(datetime::get-year(datetime::now()), 2, 2)}"/>
    <property name="version.revision"           value="${string::pad-left(datetime::get-hour(datetime::now()),2,'0')}${string::pad-left(datetime::get-minute(datetime::now()),2,'0')}"/>
    <property name="project.fullversion"        value="${version.major}.${version.minor}.${version.build}.${version.revision}" dynamic="true" />

       
    <!-- Database Settings -->
    <property name="database.script.directory" value="${base.dir}/Database" />
    <property name="database.server" value="localhost" overwrite="false" />
    <property name="database.name" value="${project::get-name()}" overwrite="false" />
    <property name="database.integratedAuthentication" value="true" overwrite="false" />
    <property name="database.creation.username" value="" overwrite="false" />
    <property name="database.creation.password" value=""  overwrite="false" />
    <property name="database.application.username" value="CRInetaUser" overwrite="false" />
    <property name="database.application.password" value="p@ssw0rd" overwrite="false" />
    <property name="database.debug.show_sql" value="false" />
    
    <!-- Framework Settings -->
    <property name="nant.settings.currentframework" value="net-3.5" />
    
<!-- ======================================================================================================================================================-->
<!-- Tasks -->
<!-- ======================================================================================================================================================-->    

    <target name="clean" description="Delete Automated Build artifacts">
        <delete dir="${build.root.dir}" if="${directory::exists(build.root.dir)}" failonerror="false" />
    </target>
    
    <target name="config" description="Generates necessary config files based on local settings">    
		<copy file="config\hibernate.cfg.xml.template" tofile="src\hibernate.cfg.xml" overwrite="true">
			<filterchain>
				<replacetokens>
					<token key="SERVER" value="${database.server}" />
					<token key="DBNAME" value="${database.name}" />
					<token key="SHOW_SQL" value="${database.debug.show_sql}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>
    
    <target name="init" description="Initializes build properties">
        <mkdir dir="${build.root.dir}" />
        <echo message="Current Directory: ${project::get-base-directory()}"/>
    </target>
    
    <target name="version" description="mark AssemblyInfo builds with the build number">
        <if test="${property::exists('CCNetLabel')}">
            <property name="version.revision" value="${string::substring(CCNetLabel, string::last-index-of(CCNetLabel, '.') + 1, string::get-length(CCNetLabel) - string::last-index-of(CCNetLabel, '.') - 1)}"/>
        </if>
        <echo message="Version is ${project.fullversion}" />
    </target>
    
    <target name="commonassemblyinfo" depends="version, init">
        <property name="project.description" value="" dynamic="true" />

        <if test="${property::exists('CCNetBuildDate')}">
            <property name="project.description" value="Built at ${CCNetBuildTime} on ${CCNetBuildDate} (${CCNetBuildCondition})"/>
        </if>
        <echo message="MARKING THIS BUILD AS VERSION ${project.fullversion}" />
        <delete file="${solution.dir}/CommonAssemblyInfo.cs" failonerror="false"/>
        <asminfo output="${solution.dir}/CommonAssemblyInfo.cs" language="CSharp">
            <imports>
                <import namespace="System" />
                <import namespace="System.Reflection" />
                <import namespace="System.Runtime.InteropServices" />
            </imports>
            <attributes>
                <!--<attribute type="ComVisibleAttribute" value="false" />-->
                <attribute type="AssemblyVersionAttribute" value="${project.fullversion}" />
                <attribute type="AssemblyFileVersionAttribute" value="${project.fullversion}" />
                <attribute type="AssemblyCopyrightAttribute" value="Copyright Â© ${company.name} 1979-${datetime::get-year(datetime::now())}" />
                <attribute type="AssemblyProductAttribute" value="${project::get-name()}" />
                <attribute type="AssemblyCompanyAttribute" value="${company.name}" />
                <attribute type="AssemblyConfigurationAttribute" value="" />
                <attribute type="AssemblyInformationalVersionAttribute" value="${project.fullversion}" />
                <!--<attribute type="AssemblyDescriptionAttribute" value="${project.description}" />-->
            </attributes>
            <references>
                <include name="System.dll" />
            </references>
        </asminfo>
    </target>


    <target name="compile" description="Compiles using the AutomatedDebug Configuration">
        <loadtasks assembly="tools/nantcontrib/NAnt.Contrib.Tasks.dll" />

        <msbuild project="${solution.file}" verbosity="Quiet">
            <property name="Configuration" value="${solution.configuration}"/>
            <property name="SolutionDir" value="${project::get-base-directory()}/${solution.dir}"/>
        </msbuild>
        
    </target>
    
    <target name="build" depends="config, clean, init, version, commonassemblyinfo, compile" description="Compiles, tests, and produces distributions" />

<!-- ======================================================================================================================================================-->
<!-- Database tasks -->
<!-- ======================================================================================================================================================-->    

    <target name="builddatabase" depends="config, dropDatabase, modifyDatabaseScriptsCheck, createDatabase" />

    <target name="modifyDatabaseScriptsCheck" description="Checks to see whether the DBScripts should be modified">
      <if test="${property::exists('database.createFromTemplate')}">
            <echo message="Database scripts will be modified using template with supplied property values" />
            <call target="modifyDatabaseScripts" />
        </if>
    </target>
    
    <target name="modifyDatabaseScripts">
        <copy file="${database.script.directory}\create\001_CreateWebUserAccount.sql.template" tofile="${database.script.directory}\create\001_CreateWebUserAccount.sql" overwrite="true">
            <filterchain>
                <replacetokens>
                    <token key="DBNAME" value="${database.name}" />
                    <token key="DBUSERNAME" value="${database.application.username}" />
                    <token key="DBPASSWORD" value="${database.application.password}" />
                </replacetokens>
            </filterchain>
        </copy>
    </target>
    
    <target name="updateDatabase">
      <property name="action" value="Update" />
      <call target="manageSqlDatabase" />
    </target>

    <target name="rebuildDatabase">
      <property name="action" value="Rebuild" />
      <call target="manageSqlDatabase" />
    </target>

    <target name="createDatabase">
      <property name="action" value="Create" />
      <call target="manageSqlDatabase" />
    </target>

    <target name="dropDatabase">
      <property name="action" value="Drop" />
      <call target="manageSqlDatabase" failonerror="false"/>
    </target>

    <target name="manageSqlDatabase">
      <manageSqlDatabase
        scriptDirectory="${database.script.directory}"
        action="${action}"
        server="${database.server}"
        integratedAuthentication="${database.integratedAuthentication}"
        database="${database.name}"
        username="${database.creation.username}"
        password="${database.creation.password}"
      />

      <if test="${action != 'Drop'}">
        <echo message="Current Database Version: ${usdDatabaseVersion}" />
      </if>

    </target>
</project>
